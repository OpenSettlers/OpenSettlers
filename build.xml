<?xml version="1.0"?>
<project default="build"
         name="opensettlers">
  <!-- Give user a chance to override without editing this file
       (and without typing -D each time compiling) -->
  <property file="build.properties" />
  <property file="${user.home}/build.properties" />
  <property environment="env" />
  <property name="debug"
            value="true" />
  <property name="optimize"
            value="true" />
  <property name="deprecation"
            value="false" />
  <property name="name"
            value="opensettlers" />
  <property name="Name"
            value="OpenSettlers" />
  <!-- version under development, e.g. 1.1, 1.2-RC2, 2.0-SNAPSHOT -->
  <property name="version"
            value="1.1.09" />
  <property name="versionnum"
            value="1109" />
  <property name="copyright"
            value="2001-2004 Robb Thomas, portions 2007-2010 Jeremy D Monin, portions 2010 Nate Parsons" />
  <property name="url"
            value="http://github.com/nsp/OpenSettlers" />
  <!-- **** See build.properties for client/server startup arguments **** -->
  <property name="experiment.class"
            value="experiment.Experiment" />
  <property name="client.class"
            value="org.soc.client.PlayerClient" />
  <property name="server.class"
            value="org.soc.server.SOCServer" />
  <property name="main.class"
            value="${client.class}" />
  <!-- directory names -->
  <!-- These must remain simple values, (relative to basedir) -->
  <property name="src"
            value="src" />
  <property name="lib"
            value="lib" />
  <!-- 3rd party libs -->
  <property name="docs.src"
            value="xdocs" />
  <property name="bin.src"
            value="src/bin" />
  <property name="java.src"
            value="src/java" />
  <property name="test.src"
            value="src/test" />
  <property name="web.src"
            value="src/web" />
  <property location="target"
            name="target" />
  <property location="${target}/classes"
            name="classes" />
  <property location="${target}/bin"
            name="bin.target" />
  <property location="${target}/lib"
            name="lib.target" />
  <property location="${target}/test-classes"
            name="test.classes" />
  <property location="${target}/test-reports"
            name="test.reports" />
  <property location="${target}/generated-xdocs"
            name="docs.generated" />
  <property location="${target}/docs"
            name="docs.target" />
  <property location="${docs.target}/api"
            name="api.target" />
  <property location="dist"
            name="dist" />
  <!-- version file basename relative to ${classes} and ${java.src} -->
  <property name="version.info"
            value="resources/version.info" />
  <!-- packaging -->
  <property name="client.jar"
            value="${Name}.jar" />
  <property name="server.jar"
            value="${Name}Server.jar" />
  <property name="test.jar"
            value="${Name}Test.jar" />
  <property name="dist.name"
            value="${name}-${version}" />
  <property name="dist.src.name"
            value="${dist.name}-src" />
  <property name="installer.jar"
            value="${dist}/${dist.name}-installer.jar" />
  <property name="dist.tgz"
            value="${dist}/${dist.name}.tar.gz" />
  <property name="dist.zip"
            value="${dist}/${dist.name}.zip" />
  <property name="dist.src.tgz"
            value="${dist}/${dist.src.name}.tar.gz" />
  <property name="dist.src.zip"
            value="${dist}/${dist.src.name}.zip" />
  <!-- files for the distributions -->
  <fileset dir="."
           id="readme.files">
    <include name="COPYING.txt" />
    <include name="README.txt" />
    <include name="VERSIONS.txt" />
  </fileset>
  <!-- jar file packages -->
  <patternset id="server.files">
    <include name="org.soc/robot/" />
    <include name="org.soc/server/" />
  </patternset>
  <patternset id="client.files">
    <include name="uct/" />
    <include name="resources/" />
    <!-- for version file -->
    <include name="org.soc/" />
    <!-- everything... -->
    <exclude name="org.soc/robot/" />
    <exclude name="org.soc/client/" />
    <!-- ...except these -->
    <exclude name="org.soc/server/" />
  </patternset>
  <patternset id="client.files">
    <include name="resources/" />
    <!-- client may run local server -->
    <include name="org.soc/" />
    <!-- thus, everything -->
  </patternset>
  <!-- external libraries -->
  <fileset dir="${lib}"
           id="ext.libs"
           includes="*.jar" />
  <!-- class paths -->
  <path id="classpath">
    <pathelement location="${classes}" />
    <fileset dir="${lib.target}"
             includes="*.jar" />
  </path>
  <!-- Not used: For later.... -->
  <path id="ext.cp">
    <fileset refid="${ext.libs}" />
  </path>
  <!-- Not used: For later.... -->
  <path id="installer.cp">
    <path refid="classpath" />
    <pathelement location="${izpack.home}/lib/compiler.jar" />
  </path>
  <!-- ************************************** -->
  <!-- Initialization -->
  <!-- ************************************** -->
  <target name="init">
    <tstamp />
  </target>
  <target depends="init"
          name="init-libs">
    <mkdir dir="${lib.target}" />
    <!-- Later: when we use external libraries -->
    <copy toDir="${lib.target}">
      <fileset refid="ext.libs" />
    </copy>
  </target>
  <target description="Copy resources to classes directory"
          name="resources">
    <copy toDir="${classes}">
      <fileset dir="${java.src}"
               includes="org.soc/**/*.gif" />
    </copy>
  </target>
  <!-- ************************************** -->
  <!-- Third party dependancy checks -->
  <!-- ************************************** -->
  <!-- Not used: For later.... -->
  <target depends="init"
          name="check-junit">
    <available classname="junit.framework.TestCase"
               classpathref="ext.cp"
               property="junit.present" />
  </target>
  <!-- Not used: For later installer.... see http://izpack.org/ -->
  <target depends="init"
          name="check-izpack">
    <available classname="com.izforge.izpack.ant.IzPackTask"
               classpathref="installer.cp"
               property="izpack.present" />
    <fail unless="izpack.present">The IzPack program is not available. Download it from http://izpack.org/. Install it, and set the &#39;izpack.home&#39; property in build.properties.</fail>
  </target>
  <!-- ************************************** -->
  <!-- Compilation targets -->
  <!-- ************************************** -->
  <!-- Compile the java code from ${java.src} into ${classes} so
       that tests can be done on compiled classes without creating
       distribution tarballs -->
  <target depends="init-libs,resources"
          description="Compile class files into &#39;classes&#39;."
          name="compile">
    <!-- version updates when info build.xml changes -->
    <dependset>
      <srcfilelist dir="${basedir}"
                   files="build.xml" />
      <targetfilelist dir="${classes}"
                      files="${version.info}" />
    </dependset>
    <copy file="${java.src}/${version.info}.in"
          tofile="${classes}/${version.info}">
      <filterset>
        <filter token="VERSION"
                value="${version}" />
        <filter token="VERSIONNUM"
                value="${versionnum}" />
        <filter token="COPYRIGHT"
                value="${copyright}" />
      </filterset>
    </copy>
    <javac classpathref="classpath"
           debug="${debug}"
           deprecation="${deprecation}"
           destdir="${classes}"
           optimize="${optimize}"
           srcdir="${java.src}" />
  </target>
  <!-- Create two jars: client and server (which depends on client) -->
  <target depends="compile"
          description="Create project jar files."
          name="build">
    <jar basedir="${classes}"
         destfile="${target}/${client.jar}">
      <patternset refid="client.files" />
      <manifest>
        <attribute name="Main-Class"
                   value="${client.class}" />
      </manifest>
    </jar>
    <jar basedir="${classes}"
         destfile="${target}/${server.jar}">
      <patternset refid="server.files" />
      <manifest>
        <attribute name="Main-Class"
                   value="${server.class}" />
        <attribute name="Class-Path"
                   value="${client.jar}" />
      </manifest>
    </jar>
  </target>
  <!-- ************************************** -->
  <!-- Testing targets -->
  <!-- ************************************** -->
  <target depends="compile-tests"
          name="test">
    <mkdir dir="${test.reports}" />
    <junit dir="./"
           failureproperty="test.failure"
           fork="true"
           haltonerror="no"
           printSummary="yes">
      <sysproperty key="basedir"
                   value="." />
      <formatter type="xml" />
      <formatter type="plain"
                 usefile="true" />
      <classpath>
        <fileset refid="ext.libs" />
        <pathelement path="${test.classes}" />
        <pathelement path="${classes}" />
      </classpath>
      <batchtest fork="yes"
                 todir="${test.reports}">
        <fileset dir="${test.classes}">
          <include name="**/Test*.class" />
          <exclude name="**/TestAll.class" />
        </fileset>
      </batchtest>
    </junit>
    <junitreport>
      <fileset dir="${test.reports}"
               includes="TEST-*.xml" />
      <report format="noframes" />
    </junitreport>
    <fail if="test.failure"
          message="There were test failures." />
  </target>
  <target depends="compile"
          name="compile-tests">
    <mkdir dir="${test.classes}" />
    <javac classpathref="classpath"
           debug="${debug}"
           deprecation="${deprecation}"
           destdir="${test.classes}"
           optimize="${optimize}"
           srcdir="${test.src}" />
  </target>
  <!-- ************************************** -->
  <!-- Distribution targets -->
  <!-- ************************************** -->
  <!-- Prevent build warning if IzPack not available -->
  <macrodef description="create a taskdef, without warning when classname isn&#39;t available"
            name="taskdef-unchecked">
    <attribute name="taskname" />
    <attribute name="classname" />
    <attribute name="cp-ref" />
    <sequential>
      <taskdef classname="@{classname}"
               classpathref="{@cp-ref}"
               name="@{taskname}" />
    </sequential>
  </macrodef>
  <!-- Create installer (requires IzPack) -->
  <target depends="check-izpack,build,docs"
          description="Create installer (Need IzPack: http://izpack.org/)"
          if="izpack.present"
          name="installer">
    <fail>An installation file has not yet been created.</fail>
    <mkdir dir="${dist}" />
    <taskdef-unchecked classname="com.izforge.izpack.ant.IzPackTask"
                       classpathref="installer.cp"
                       taskname="izpack" />
    <izpack basedir="."
            input="${src}/installer/install.xml"
            installerType="standard"
            izPackDir="${izpack.home}"
            output="${installer.jar}" />
  </target>
  <!-- Create distribution tarballs -->
  <target depends="build,docs"
          description="Build distribution tarballs and zips."
          name="dist">
    <property name="dist.tmp"
              value="${dist}/${dist.name}" />
    <delete dir="${dist.tmp}"
            quiet="true" />
    <copy preservelastmodified="true"
          todir="${dist.tmp}">
      <fileset refid="readme.files" />
      <!-- program and libs -->
      <fileset dir="${target}">
        <include name="${client.jar}" />
        <include name="${server.jar}" />
        <include name="docs/" />
        <include name="lib/" />
      </fileset>
    </copy>
    <copy todir="${dist.tmp}/web">
      <fileset dir="${web.src}" />
    </copy>
    <tar basedir="${dist}"
         compression="gzip"
         destfile="${dist.tgz}"
         includes="${dist.name}/" />
    <zip basedir="${dist}"
         destfile="${dist.zip}"
         includes="${dist.name}/" />
    <!-- clean up -->
    <delete dir="${dist.tmp}"
            quiet="true" />
  </target>
  <!-- Create a source tarball suitable for building the project -->
  <target depends="init"
          description="Create a tarball of the source tree"
          name="src">
    <echo>This copies everything in your &quot;src&quot; directory, so be sure to run on a clean repository only!</echo>
    <property name="dist.src.tmp"
              value="${dist}/${dist.src.name}" />
    <delete dir="${dist.src.tmp}"
            quiet="true" />
    <copy preservelastmodified="true"
          todir="${dist.src.tmp}">
      <fileset refid="readme.files" />
      <fileset dir=".">
        <include name="README.developer" />
        <include name="build.xml" />
        <include name="build.properties" />
        <include name="${src}/" />
        <include name="${lib}/*.jar" />
      </fileset>
    </copy>
    <tar basedir="${dist}"
         compression="gzip"
         destfile="${dist.src.tgz}"
         includes="${dist.src.name}/" />
    <!-- clean up -->
    <delete dir="${dist.src.tmp}"
            quiet="true" />
  </target>
  <!-- clean the distribution directory -->
  <target depends="init"
          name="dist-clean">
    <delete includeEmptyDirs="true"
            quiet="true">
      <fileset defaultExcludes="no"
               dir="${dist}/" />
    </delete>
  </target>
  <!-- ************************************** -->
  <!-- Documentation targets -->
  <!-- ************************************** -->
  <!-- all documentation -->
  <target depends="docs.users,javadoc"
          name="docs" />
  <target name="docs.users">
    <!-- No munging, simply copy -->
    <copy todir="${docs.target}">
      <fileset dir="${src}/docs" />
    </copy>
  </target>
  <!-- generate javadoc -->
  <target depends="init-libs"
          description="Creates javadoc in &#39;docs/api&#39;"
          name="javadoc">
    <mkdir dir="${api.target}" />
    <javadoc access="package"
             additionalparam="-breakiterator"
             author="true"
             classpathref="classpath"
             destdir="${api.target}"
             doctitle="${Name}, v ${version}, API Specification"
             overview="${java.src}/main-overview.html"
             source="1.6"
             sourcepath="${java.src}"
             version="true"
             windowtitle="${Name} v${version} API">
      <packageset dir="${java.src}" />
      <header>
        <![CDATA[<b><a target="_blank" href="${url}">${Name} v${version} API</a></b><br><font size="-2">Built ${date}</font>]]>
</header>
    </javadoc>
  </target>
  <!-- ************************************** -->
  <!-- Other targets -->
  <!-- ************************************** -->
  <!-- Delete all artifacts of the project, i.e. ${target} & ${dist} -->
  <target depends="init"
          description="Cleans the project of all generated files"
          name="clean">
    <delete includeEmptyDirs="true"
            quiet="true">
      <fileset defaultExcludes="no"
               dir="${target}/" />
      <fileset defaultExcludes="no"
               dir="${dist}/" />
    </delete>
  </target>
</project>
